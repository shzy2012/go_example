package main

import (
	"fmt"
	"reflect"
	"time"
)

type MDB[T any] struct {
	DB    string
	Table string
}

func (x *MDB[T]) SetDB(db string) {
	x.DB = db
	x.Table = "users"
}

type User struct {
	MDB[User] `json:"-" bson:"-"`
	Phone     string    `json:"phone" bson:"phone"`           //手机号码
	Passwd    string    `json:"passwd" bson:"passwd"`         //密码
	UpdatedAt time.Time `json:"updated_at" bson:"updated_at"` //更新时间
}

func SetField(source interface{} /*must be a interface*/, fieldName string, fieldValue string) {
	v := reflect.ValueOf(source).Elem()
	field := v.FieldByName(fieldName)

	if field.IsValid() && field.CanSet() && field.Kind() == reflect.String {
		field.SetString(fieldValue)
	}
}

func SetDBField(source interface{} /*must be a interface*/, fieldValue string) {
	v := reflect.ValueOf(source).Elem()
	// Access the embedded MDB struct
	mdbField := v.FieldByName("MDB")
	if mdbField.IsValid() {
		dbField := mdbField.FieldByName("DB")
		if dbField.IsValid() && dbField.CanSet() && dbField.Kind() == reflect.String {
			dbField.SetString(fieldValue)
		}
	}
}

// 根据ID查找
func (x *MDB[T]) Find(id string) (T, error) {
	model := new(T)

	// Get the reflection value of the pointer and then dereference it
	val := reflect.ValueOf(model).Elem()
	typ := val.Type()

	// Ensure the underlying type is a struct
	if typ.Kind() == reflect.Struct {
		// Iterate over the fields of the struct
		for i := 0; i < typ.NumField(); i++ {
			field := typ.Field(i)
			fieldValue := val.Field(i)
			fmt.Printf("Field Name: %s, Field Type: %s, Field Value: %v\n", field.Name, field.Type, fieldValue)
		}
	}

	return *model, nil
}

func main() {
	model := User{}
	model.SetDB("hotel")
	model.Phone = "136"

	// Demonstrate setting a field using reflection
	SetField(&model /*must be a pointer*/, "Phone", "1234567890")

	// Modify the DB field using reflection
	SetDBField(&model /*must be a pointer*/, "exampleDB")

	model.Find("1")

	println("Phone=>", model.Phone)
	println("DB=>", model.DB)
	println("Table=>", model.Table)
}
