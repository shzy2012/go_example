package main

import (
	"fmt"
	"unsafe"
)

//https://blog.gopheracademy.com/advent-2019/safe-use-of-unsafe-pointer/

func main() {
	// An array of contiguous uint32 values stored in memory.
	arr := []uint32{1, 2, 3}

	// The number of bytes each uint32 occupies: 4.
	const size = unsafe.Sizeof(uint32(0))

	// Take the initial memory address of the array and begin iteration.
	p := uintptr(unsafe.Pointer(&arr[0]))
	for i := 0; i < len(arr); i++ {
		// Print the integer that resides at the current address and then
		// increment the pointer to the next value in the array.
		fmt.Printf("%d ", (*(*uint32)(unsafe.Pointer(p))))
		p += size
	}
}
