package main

import (
	"fmt"
	"math"
)

// 1. 斐波那契数列 - 一维DP入门
func fibonacci(n int) int {
	if n <= 1 {
		return n
	}

	// dp[i] 表示第i个斐波那契数
	dp := make([]int, n+1)
	dp[0], dp[1] = 0, 1

	for i := 2; i <= n; i++ {
		dp[i] = dp[i-1] + dp[i-2]
	}

	return dp[n]
}

// 斐波那契数列空间优化版本
func fibonacciOptimized(n int) int {
	if n <= 1 {
		return n
	}

	prev2, prev1 := 0, 1
	for i := 2; i <= n; i++ {
		current := prev1 + prev2
		prev2, prev1 = prev1, current
	}

	return prev1
}

// 2. 爬楼梯问题
// 每次可以爬1或2个台阶，求到达第n阶的方法数
func climbStairs(n int) int {
	if n <= 2 {
		return n
	}

	// dp[i] 表示到达第i阶的方法数
	dp := make([]int, n+1)
	dp[1], dp[2] = 1, 2

	for i := 3; i <= n; i++ {
		dp[i] = dp[i-1] + dp[i-2]
	}

	return dp[n]
}

// 3. 0-1背包问题
type Item struct {
	weight int
	value  int
}

func knapsack01(capacity int, items []Item) int {
	n := len(items)
	// dp[i][w] 表示前i个物品在容量为w时的最大价值
	dp := make([][]int, n+1)
	for i := range dp {
		dp[i] = make([]int, capacity+1)
	}

	for i := 1; i <= n; i++ {
		for w := 0; w <= capacity; w++ {
			// 不选择第i个物品
			dp[i][w] = dp[i-1][w]

			// 如果能装下第i个物品，考虑选择它
			if w >= items[i-1].weight {
				dp[i][w] = max(dp[i][w], dp[i-1][w-items[i-1].weight]+items[i-1].value)
			}
		}
	}

	return dp[n][capacity]
}

// 背包问题空间优化版本
func knapsack01Optimized(capacity int, items []Item) int {
	dp := make([]int, capacity+1)

	for _, item := range items {
		// 从后往前遍历，避免重复使用
		for w := capacity; w >= item.weight; w-- {
			dp[w] = max(dp[w], dp[w-item.weight]+item.value)
		}
	}

	return dp[capacity]
}

// 4. 最长公共子序列(LCS)
func longestCommonSubsequence(text1, text2 string) int {
	m, n := len(text1), len(text2)
	// dp[i][j] 表示text1[0:i]和text2[0:j]的LCS长度
	dp := make([][]int, m+1)
	for i := range dp {
		dp[i] = make([]int, n+1)
	}

	for i := 1; i <= m; i++ {
		for j := 1; j <= n; j++ {
			if text1[i-1] == text2[j-1] {
				dp[i][j] = dp[i-1][j-1] + 1
			} else {
				dp[i][j] = max(dp[i-1][j], dp[i][j-1])
			}
		}
	}

	return dp[m][n]
}

// 5. 最长递增子序列(LIS)
func lengthOfLIS(nums []int) int {
	if len(nums) == 0 {
		return 0
	}

	// dp[i] 表示以nums[i]结尾的最长递增子序列长度
	dp := make([]int, len(nums))
	for i := range dp {
		dp[i] = 1 // 每个元素自己构成长度为1的子序列
	}

	maxLen := 1
	for i := 1; i < len(nums); i++ {
		for j := 0; j < i; j++ {
			if nums[j] < nums[i] {
				dp[i] = max(dp[i], dp[j]+1)
			}
		}
		maxLen = max(maxLen, dp[i])
	}

	return maxLen
}

// 6. 最小路径和
func minPathSum(grid [][]int) int {
	if len(grid) == 0 || len(grid[0]) == 0 {
		return 0
	}

	m, n := len(grid), len(grid[0])
	// dp[i][j] 表示到达(i,j)位置的最小路径和
	dp := make([][]int, m)
	for i := range dp {
		dp[i] = make([]int, n)
	}

	// 初始化
	dp[0][0] = grid[0][0]

	// 初始化第一行
	for j := 1; j < n; j++ {
		dp[0][j] = dp[0][j-1] + grid[0][j]
	}

	// 初始化第一列
	for i := 1; i < m; i++ {
		dp[i][0] = dp[i-1][0] + grid[i][0]
	}

	// 填充dp表
	for i := 1; i < m; i++ {
		for j := 1; j < n; j++ {
			dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]
		}
	}

	return dp[m-1][n-1]
}

// 7. 编辑距离
func minDistance(word1, word2 string) int {
	m, n := len(word1), len(word2)
	// dp[i][j] 表示word1[0:i]转换为word2[0:j]的最小编辑距离
	dp := make([][]int, m+1)
	for i := range dp {
		dp[i] = make([]int, n+1)
	}

	// 初始化
	for i := 0; i <= m; i++ {
		dp[i][0] = i // 删除所有字符
	}
	for j := 0; j <= n; j++ {
		dp[0][j] = j // 插入所有字符
	}

	for i := 1; i <= m; i++ {
		for j := 1; j <= n; j++ {
			if word1[i-1] == word2[j-1] {
				dp[i][j] = dp[i-1][j-1] // 字符相同，不需要操作
			} else {
				// 取插入、删除、替换三种操作的最小值
				dp[i][j] = min(
					dp[i][j-1]+1, // 插入操作
					dp[i-1][j]+1, // 删除操作
				)
			}
		}
	}

	return dp[m][n]
}

// 8. 零钱兑换
func coinChange(coins []int, amount int) int {
	// dp[i] 表示凑成金额i所需的最少硬币数
	dp := make([]int, amount+1)
	for i := range dp {
		dp[i] = math.MaxInt32
	}
	dp[0] = 0

	for i := 1; i <= amount; i++ {
		for _, coin := range coins {
			if coin <= i && dp[i-coin] != math.MaxInt32 {
				dp[i] = min(dp[i], dp[i-coin]+1)
			}
		}
	}

	if dp[amount] == math.MaxInt32 {
		return -1
	}
	return dp[amount]
}

// 辅助函数
func max(a, b int) int {
	if a > b {
		return a
	}
	return b
}

func min(a, b int) int {
	if a < b {
		return a
	}
	return b
}

// 测试函数
func main() {
	fmt.Println("=== 动态规划示例 ===")

	// 1. 斐波那契数列
	fmt.Printf("斐波那契数列 F(10) = %d\n", fibonacci(10))
	fmt.Printf("斐波那契数列优化版 F(10) = %d\n", fibonacciOptimized(10))

	// 2. 爬楼梯
	fmt.Printf("爬到第5阶的方法数: %d\n", climbStairs(5))

	// 3. 0-1背包
	items := []Item{
		{weight: 2, value: 3},
		{weight: 3, value: 4},
		{weight: 4, value: 5},
		{weight: 5, value: 6},
	}
	fmt.Printf("背包容量5，最大价值: %d\n", knapsack01(5, items))
	fmt.Printf("背包优化版，最大价值: %d\n", knapsack01Optimized(5, items))

	// 4. 最长公共子序列
	fmt.Printf("LCS('abcde', 'ace'): %d\n", longestCommonSubsequence("abcde", "ace"))

	// 5. 最长递增子序列
	nums := []int{10, 9, 2, 5, 3, 7, 101, 18}
	fmt.Printf("LIS([10,9,2,5,3,7,101,18]): %d\n", lengthOfLIS(nums))

	// 6. 最小路径和
	grid := [][]int{
		{1, 3, 1},
		{1, 5, 1},
		{4, 2, 1},
	}
	fmt.Printf("最小路径和: %d\n", minPathSum(grid))

	// 7. 编辑距离
	fmt.Printf("编辑距离('horse', 'ros'): %d\n", minDistance("horse", "ros"))

	// 8. 零钱兑换
	coins := []int{1, 3, 4}
	fmt.Printf("凑成金额6的最少硬币数: %d\n", coinChange(coins, 6))
}
